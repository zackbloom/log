// Generated by CoffeeScript 1.3.3
(function() {
  var append, applyToken, buildCSS, emit, getMarkdownInstance, isArray, log, merge, parse,
    __slice = [].slice;

  getMarkdownInstance = function() {
    return new markdown.Markdown(markdown.Markdown.dialects.Gruber);
  };

  parse = function(input) {
    var md;
    md = getMarkdownInstance();
    return md.processInline(input);
  };

  isArray = function(obj) {
    return obj.constructor.toString().indexOf('Array') !== -1;
  };

  append = function(arr1, arr2) {
    arr1.splice.apply(arr1, [arr1.length, 0].concat(__slice.call(arr2)));
    return arr1;
  };

  merge = function(obj1, obj2) {
    var k, v;
    for (k in obj2) {
      v = obj2[k];
      obj1[k] = v;
    }
    return obj1;
  };

  applyToken = function(token) {
    var addFormat, block, element, format, type;
    element = null;
    format = null;
    addFormat = function(obj) {
      if (format == null) {
        format = {};
      }
      return merge(format, obj);
    };
    if (!isArray(token)) {
      element = token;
    } else {
      type = token[0], block = token[1];
      switch (type) {
        case 'inlinecode':
          addFormat({
            'font-family': 'monospace'
          });
          break;
        case 'em':
          addFormat({
            'font-weight': 900
          });
      }
      block = applyToken(block);
      element = block.element;
      merge(format, block.format);
    }
    return {
      element: element,
      format: format
    };
  };

  buildCSS = function(format) {
    var key, out, val;
    out = '';
    for (key in format) {
      val = format[key];
      out += "" + key + ": " + val + ";";
    }
    return out;
  };

  emit = function(tokens) {
    var element, elements, format, formatters, inStyle, token, _i, _len, _ref;
    elements = [];
    formatters = [];
    inStyle = false;
    for (_i = 0, _len = tokens.length; _i < _len; _i++) {
      token = tokens[_i];
      _ref = applyToken(token), element = _ref.element, format = _ref.format;
      if (format) {
        elements.push('%c');
        formatters.push(buildCSS(format));
        inStyle = true;
      } else if (inStyle) {
        elements.push('%c');
        formatters.push('');
        inStyle = false;
      }
      elements.push(element);
    }
    return {
      elements: elements,
      formatters: formatters
    };
  };

  log = function() {
    var elements, formatters, logArgs, logElements, logFormats, message, messages, tokens, _i, _len, _ref;
    messages = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    logFormats = [];
    logElements = [];
    for (_i = 0, _len = messages.length; _i < _len; _i++) {
      message = messages[_i];
      tokens = parse(message);
      _ref = emit(tokens), elements = _ref.elements, formatters = _ref.formatters;
      logElements.push(elements.join(''));
      append(logFormats, formatters);
    }
    logArgs = [logElements.join(' ')];
    append(logArgs, logFormats);
    return console.log.apply(console, logArgs);
  };

  window.log = log;

}).call(this);
